@model IEnumerable<DataAccessLayer.Models.Category>

@{
    ViewData["Title"] = "Categorieën";
    var gridData = (Model ?? Enumerable.Empty<DataAccessLayer.Models.Category>()).Select(c => new object[] {
        c.Id,
        c.Name,
        c.Description,
        c.CreatedAt.ToString("dd/MM/yyyy"),
        c.Active
    }).ToList();
}

<div class="container-fluid py-4">
    <h1 class="h3 text-gray-800 mb-3">
        <i class="fas fa-tags me-2"></i>Categorieën
    </h1>
    <small class="text-muted mb-4 d-block">Beheer hier alle categorieën</small>

    <div class="d-flex gap-2 mb-3 flex-wrap">
        <a class="btn btn-primary btn-sm d-flex align-items-center" asp-action="Create" style="max-width: 180px; white-space: nowrap;">
            <i class="fas fa-plus me-1"></i>Nieuwe categorie
        </a>
        <div class="btn-group">
            <button type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fas fa-filter me-1"></i>
                @{
                    var filter = ViewBag.Filter as string ?? "actief";
                    var filterText = filter == "alle" ? "Alle categorieën" : filter == "actief" ? "Alleen actieve categorieën" : "Alleen inactieve categorieën";
                }
                @filterText
            </button>
            <ul class="dropdown-menu">
                <li>
                    <a class="dropdown-item @(filter == "actief" ? "active" : "")" asp-action="Index" asp-route-filter="actief">Alleen actieve categorieën</a>
                </li>
                <li>
                    <a class="dropdown-item @(filter == "inactief" ? "active" : "")" asp-action="Index" asp-route-filter="inactief">Alleen inactieve categorieën</a>
                </li>
                <li>
                    <a class="dropdown-item @(filter == "alle" ? "active" : "")" asp-action="Index" asp-route-filter="alle">Alle categorieën</a>
                </li>
            </ul>
        </div>
    </div>
  
    <div id="gridjs-search-wrapper" class="mb-3"></div>
    <div id="categories-grid" class="mt-3"></div>
</div>

@section Scripts {
    <script>
        // GridJS tabel aanmaken voor categorieën
        const grid = new gridjs.Grid({
            // Kolommen instellen
            columns: [
                { name: "Id", hidden: true },
                { name: "Naam", sort: true, search: true },
                { name: "Beschrijving", sort: true, search: true },
                { name: "Aangemaakt op", sort: true, search: false },
                {
                    name: "Status",
                    sort: true,
                    // Status weergeven als badge
                    formatter: (cel) => {
                        if (cel === true || cel === "true" || cel === 1) {
                            return gridjs.html("<span class='badge bg-primary'>Actief</span>");
                        } else {
                            return gridjs.html("<span class='badge bg-secondary'>Inactief</span>");
                        }
                    }
                },
                {
                    name: "Acties",
                    sort: false,
                    search: false,
                    // Actieknoppen voor bewerken en verwijderen
                    formatter: (cell, row) => {
                        const id = row.cells[0].data;
                        return gridjs.html(`
                            <a href="/Categorieen/Bewerken/${id}" class="btn btn-sm btn-outline-warning me-1" title="Bewerken">
                                <i class="fas fa-edit"></i>
                            </a>
                            <a href="/Categorieen/Verwijderen/${id}" class="btn btn-sm btn-outline-danger" title="Deactiveren">
                                <i class="fas fa-trash"></i>
                            </a>
                        `);
                    }
                }
            ],
            // Data vullen vanuit de server
            data: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(gridData)),
            pagination: { limit: 10 },
            search: { placeholder: 'Typ hier om te zoeken...' },
            language: {
                search: { placeholder: 'Typ hier om te zoeken...' },
                pagination: {
                    previous: 'Vorige',
                    next: 'Volgende',
                    showing: 'Toont',
                    of: 'van',
                    results: () => 'resultaten'
                },
                loading: 'Laden...',
                noRecordsFound: 'Geen resultaten gevonden'
            },
            sort: true,
            className: {
                container: 'table-responsive',
                table: 'table table-hover align-middle mb-0',
                thead: 'table-light',
                th: 'text-nowrap',
                footer: 'table-light'
            }
        });

        // Tabel renderen in de juiste div
        grid.render(document.getElementById("categories-grid")).then(() => {
            // Zoek en verplaats de search bar naar een aparte container boven de tabel
            const gridContainer = document.querySelector("#categories-grid");
            const searchBar = gridContainer.querySelector(".gridjs-search");
            const searchWrapper = document.getElementById("gridjs-search-wrapper");
            if (searchBar && searchWrapper) {
                searchWrapper.appendChild(searchBar);
            }
        });
    </script>
}
