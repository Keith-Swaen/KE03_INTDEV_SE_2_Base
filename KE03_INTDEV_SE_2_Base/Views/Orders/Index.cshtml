@model IEnumerable<DataAccessLayer.Models.Order>

@{
    ViewData["Title"] = "Order Overzicht";
}

<div class="container-fluid py-4">
    <h1 class="h3 text-gray-800 mb-3">
        <i class="fas fa-receipt me-2"></i>Order Overzicht
    </h1>
    <small class="text-muted mb-4 d-block">Bekijk hier alle bestellingen en hun details</small>

    <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap">
        <div id="gridjs-search-wrapper" class="flex-grow-1 me-3"></div>
    </div>

    <div id="orders-grid"></div>
</div>

@section Scripts {
    <script>
        const grid = new gridjs.Grid({
            columns: [
                {
                    name: "Order ID",
                    sort: true,
                    search: true
                },
                {
                    name: "Orderdatum",
                    sort: true,
                    formatter: (cell) => {
                        const date = new Date(cell);
                        return date.toLocaleDateString('nl-NL');
                    },
                    search: {
                        compare: (cell, keyword) => {
                            const date = new Date(cell);
                            const dateString = date.toLocaleDateString('nl-NL');
                            return dateString.toLowerCase().includes(keyword.toLowerCase());
                        }
                    }
                },
                {
                    name: "Klantnaam",
                    sort: true,
                    search: true
                },
                {
                    name: "Producten",
                    formatter: (cell) => {
                        if (cell && cell.length > 0) {
                            return cell.join(", ");
                        }
                        return "Geen producten";
                    },
                    search: {
                        compare: (cell, keyword) => {
                            if (!cell || cell.length === 0) return false;
                            return cell.some(product => product.toLowerCase().includes(keyword.toLowerCase()));
                        }
                    }
                },
                {
					name: "Waarde",
					sort: true,
					formatter: (cell) => `€ ${cell}`,
					search: {
						compare: (cell, keyword) => cell.toString().includes(keyword)
					}
				},
                {
                    name: "Acties",
                    sort: false,
                    search: false,
                    formatter: (cell) => gridjs.html(cell)
                }
            ],
            data: [
                @foreach (var order in Model)
                {
                    <text>[
                        "@order.Id.ToString()",
                        "@order.OrderDate.ToString("yyyy-MM-dd")",
                        "@order.Customer?.Name",
                        @Json.Serialize(order.OrderProducts?.Select(p => p.ProductName) ?? new List<string>()),
                        "@order.OrderProducts.Sum(p => p.ProductPrice)",
                        `@Html.Raw($@"<a href='/Orders/Edit/{order.Id}' class='btn btn-sm btn-outline-warning me-1' title='Bewerken'><i class='fas fa-edit'></i></a>
                                     <a href='/Orders/Details/{order.Id}' class='btn btn-sm btn-outline-info me-1' title='Details'><i class='fas fa-info-circle'></i></a>
                                     <a href='/Orders/Delete/{order.Id}' class='btn btn-sm btn-outline-danger' title='Verwijderen'><i class='fas fa-trash'></i></a>")`
                    ],</text>
                }
            ],
            pagination: {
                limit: 10
            },
            search: {
                placeholder: 'Typ hier om te zoeken...'
            },
            language: {
                search: {
                    placeholder: 'Typ hier om te zoeken...'
                },
                pagination: {
                    previous: 'Vorige',
                    next: 'Volgende',
                    showing: 'Toont',
                    of: 'van',
                    results: () => 'resultaten'
                },
                loading: 'Laden...',
                noRecordsFound: 'Geen resultaten gevonden'
            },
            sort: true,
            className: {
                container: 'table-responsive',
                table: 'table table-hover align-middle mb-0',
                thead: 'table-light',
                th: 'text-nowrap',
                footer: 'table-light'
            }
        }).render(document.getElementById("orders-grid"));
    </script>
}
