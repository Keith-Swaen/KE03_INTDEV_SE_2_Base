@model KE03_INTDEV_SE_2_Base.Models.OrderCreateViewModel

@{
    ViewData["Title"] = "Nieuwe Bestelling";
    var initialCount = (Model.OrderProducts != null && Model.OrderProducts.Count > 0) ? Model.OrderProducts.Count : 1;
}

<div class="container-fluid py-4">
    <div class="card shadow-sm" style="max-width:700px; margin:0 auto;">
        <div class="card-header bg-primary text-white">
            <h3 class="card-title mb-0"><i class="fas fa-plus me-2"></i>Nieuwe Bestelling</h3>
        </div>
        <div class="card-body">
            <form asp-action="Create" method="post">
                <div asp-validation-summary="All" class="text-danger mb-3"></div>
                <div class="form-group mb-3">
                    <label asp-for="CustomerId" class="control-label">Klant</label>
                    <select asp-for="CustomerId" class="form-select" asp-items="Model.Customers" required>
                        <option value="">-- Selecteer een klant --</option>
                    </select>
                    <span asp-validation-for="CustomerId" class="text-danger"></span>
                </div>
                <hr />
                <label class="fw-semibold mb-2">Producten toevoegen</label>
                <div id="order-products">
                    @for (int i = 0; i < initialCount; i++)
                    {
                        var selectedProductId = (Model.OrderProducts != null && Model.OrderProducts.Count > i) ? Model.OrderProducts[i].ProductId.ToString() : string.Empty;
                        var quantity = (Model.OrderProducts != null && Model.OrderProducts.Count > i) ? Model.OrderProducts[i].Quantity : 1;
                        <div class="row mb-2 align-items-end" data-index="@i">
                            <div class="col-6">
                                <select name="OrderProducts[@i].ProductId" class="form-select" required>
                                    <option value="">-- Selecteer een product --</option>
                                    @foreach (var p in Model.Products ?? new List<SelectListItem>())
                                    {
                                        <option value="@p.Value" selected="@(p.Value == selectedProductId ? "selected" : "")">@p.Text</option>
                                    }
                                </select>
                            </div>
                            <div class="col-3">
                                <input name="OrderProducts[@i].Quantity" type="number" min="1" value="@quantity" class="form-control" required />
                            </div>
                            <div class="col-1">
                                <button type="button" class="btn btn-danger" onclick="removeProduct(this)" title="Verwijder product">×</button>
                            </div>
                        </div>
                    }
                </div>
                <button type="button" id="btn-add-product" class="btn btn-secondary mb-3" onclick="addProduct()">+ Product toevoegen</button>
                <div class="form-group d-flex gap-2">
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-save"></i> Bestelling aanmaken
                    </button>
                    <a asp-action="Index" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Terug naar overzicht
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Alle producten als array {value, text}
        const allProducts = [
        @foreach (var p in Model.Products)
        {
            <text>{ value: '@p.Value', text: '@p.Text' },</text>
        }
        ];

        let productIndex = @initialCount;

        function renderProductOptions(selectedValue = '') {
            const options = allProducts.map(p => {
                const selectedAttr = (p.value === selectedValue) ? ' selected' : '';
                return `<option value="${p.value}"${selectedAttr}>${p.text}</option>`;
            }).join('');
            return `<option value="">-- Selecteer een product --</option>` + options;
        }

        function addProduct(selectedValue = '') {
            console.log('addProduct called');
            const container = document.getElementById("order-products");
            const html = `
                <div class="row mb-2 align-items-end" data-index="${productIndex}">
                    <div class="col-6">
                        <select name="OrderProducts[${productIndex}].ProductId" class="form-select" required>
                            ${renderProductOptions(selectedValue)}
                        </select>
                    </div>
                    <div class="col-3">
                        <input name="OrderProducts[${productIndex}].Quantity" type="number" min="1" value="1" class="form-control" required />
                    </div>
                    <div class="col-1">
                        <button type="button" class="btn btn-danger" onclick="removeProduct(this)" title="Verwijder product">×</button>
                    </div>
                </div>`;

            container.insertAdjacentHTML("beforeend", html);
            productIndex++;
        }

        function removeProduct(button) {
            button.closest('.row').remove();
        }

        document.addEventListener('DOMContentLoaded', () => {
        });
    </script>

    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}
